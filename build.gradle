apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'pmd'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
    maven {
        name = 'Sonatype Nexus Snapshots'
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.7'
}

group = 'io.openio.sds'
version = file('version.txt').text.trim()

if (!project.hasProperty('build.type') || project.property('build.type') != 'release') {
    version = version + '-SNAPSHOT'
}
ext.isReleaseVersion = !version.endsWith('SNAPSHOT')


dependencies {
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.5'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.eclipse.jetty:jetty-server:9.3.10.v20160621'
}

findbugs {
    sourceSets = []
    ignoreFailures = true
}

pmd {
    ignoreFailures = true
}

findbugsMain {

    effort = 'max'

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

check {
    finalizedBy findbugsMain
}

test {
    useJUnit()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco"
    }
}

jar {
  baseName='openio-api'
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allJava
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  useGpgCmd()
  required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
  sign configurations.archives
}

tasks.withType(Sign) {
  // Workaround bug in Gradle
  // https://github.com/gradle/gradle/issues/5064
  onlyIf { isReleaseVersion }
}

def ossrhUsername = properties['ossrhUsername']

def ossrhPassword = properties['ossrhPassword']

uploadArchives {
  repositories {
    mavenDeployer {

      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'OpenIO SDS API'
        packaging 'jar'
        description 'OpenIO SDS API'
        url 'http://openio.io'

        scm {
          url 'https://github.com/open-io/oio-api-java'
        }
        licenses {
          license {
            name 'GNU Lesser General Public License v3'
            url 'https://www.gnu.org/licenses/lgpl.txt'
          }
        }
        developers {
          developer {
            id 'jkasarherou'
            name 'Julien Kasarherou'
            email 'julien@openio.io'
          }
          developer {
            id 'fvennetier'
            name 'Florent Vennetier'
            email 'florent@fridu.net'
          }
        }
      }
    }
  }
}
